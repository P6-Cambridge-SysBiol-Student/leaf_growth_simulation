important considerations

1) for using non cytosim, I need my code to print the output the values which are the fitness variables
(already being done)

2) need to be able to input the new "Mutated" parameters as arguements, probably being saved into a .cym file
param.h file can be editted maybe?

if doing this, it will need a function to parse all the inputs that are being passed as arguements

3) you need to change the fitness function (will probably just be comparing the fourier coefficients

4) start_job has a sub = popen([simex, '-', os..) need to change the simex = variable to match leafsim name  and delete the '-'

5) A number of directories is created, there is an option to clean-up that (enabled by default) it deletes all intermediate files
but be careful not to run too many

6) what is preconfig.py doing?

essential it is used to choose the initial conditions for the genetic algorithm

it is an executable file
you can just run it from the cmd line
you have to specify a template file
(a config.cym.tpl file), with parameters specified on the cmd line
but when the evolution algorith is running it calls this and specifies the parameters itslef
the command "diff" can be used to compare 2 template (tpl) files

preconfig will generate 1 file, but could also generate 12 files with different names
this program is used to vary parameters, You can generate many variations of congif files
often used before starting the genetic algorithm
for example you can use a random.uniform[0.1] in the cym.tpl file, and preconfig is used to choose the random variable
--help is very useful to help ch

7) To clarify, you have

The preconfig executable - able to generate random starting conditions
The C leafsim executable - able to create a leaf and output fitness variables (caught by python if run through python rather than being printed in the console)
The evolve executable - able to take output fitness the fitter runs, mutating more

basically you only use one executable
evolve executable will run the C file (the simex file), catch fourier coeffs, test fitness using arena.py functions,


8) nb about the crossover events

there is a crossover event in the genetic algorithm, genes can be swapped between creature
there is an assumption of a circular genome to ignore the fact the genes are ends of chromosomes are less likely to be crossed over
NB! but i don't think it matters too much, im not simluting evolution, im using an evolutionary-like process to optimise my parameters

There is another subtlty, you can either "accumulate" fitness over many generations, or only take into account
the fitness of the most recent generation, "resurrect" allows you to consider data aquired from the older generations in the fitness of the current generation
It is useful, e.g. you have "evolved" a really good biased coin that always lands on heads, but randomly falls on tails for a few generations
in a row, if you only include recent fitness this coin will look like an "unfit" biased coin, but including previous generation fitness
will allow some leeway if recent generations are unfit
